{"ast":null,"code":"var _jsxFileName = \"E:\\\\github_repos\\\\llm_pinecone\\\\llm-full-stack-tutorial\\\\client\\\\src\\\\components\\\\ChatInterface.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport ChatMessage from './ChatMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatInterface() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [inputText, setInputText] = useState('');\n  const messagesEndRef = useRef(null);\n  const scrollToBottom = () => {\n    var _messagesEndRef$curre;\n    (_messagesEndRef$curre = messagesEndRef.current) === null || _messagesEndRef$curre === void 0 ? void 0 : _messagesEndRef$curre.scrollIntoView({\n      behavior: \"smooth\"\n    });\n  };\n  useEffect(scrollToBottom, [messages]);\n  const handleSendMessage = async event => {\n    event.preventDefault();\n    if (!inputText.trim()) return; // Prevent sending empty messages\n\n    // Get a snapshot of the current messages + the user's message\n    // to send to the server to get an answer\n    const userMessage = {\n      text: inputText,\n      isBot: false\n    };\n    const body = {\n      chatHistory: [...messages, userMessage],\n      question: inputText\n    };\n\n    // Add a new empty bot message to the UI\n    const botMessage = {\n      text: '',\n      isBot: true\n    };\n    setMessages([...messages, userMessage, botMessage]);\n    setInputText('');\n\n    // Send the user's message to the server and wait for a response.\n    // This response will be streamed to this component.\n    const response = await fetch('http://localhost:5000/handle-query', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(body)\n    });\n    if (!response.body) return;\n\n    // Set up the infrastructure to stream the response data\n    let decoder = new TextDecoderStream();\n    const reader = response.body.pipeThrough(decoder).getReader();\n    let accumulatedAnswer = \"\";\n    while (true) {\n      var {\n        value,\n        done\n      } = await reader.read();\n      if (done) break;\n      accumulatedAnswer += value;\n      setMessages(currentHistory => {\n        const updatedHistory = [...currentHistory];\n        const lastChatIndex = updatedHistory.length - 1;\n        updatedHistory[lastChatIndex] = {\n          ...updatedHistory[lastChatIndex],\n          text: accumulatedAnswer\n        };\n        return updatedHistory;\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"chat-header\",\n      children: \"URL Question & Answer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), messages.length === 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-message bot-message\",\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"initial-message\",\n        children: \"Hi there! I'm a bot trained to answer questions about the URL you entered. Try asking me a question below!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-messages\",\n      children: [messages.map((message, index) => /*#__PURE__*/_jsxDEV(ChatMessage, {\n        message: message\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        ref: messagesEndRef\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"chat-input\",\n      onSubmit: handleSendMessage,\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        placeholder: \"Type a question and press enter ...\",\n        value: inputText,\n        onChange: e => setInputText(e.target.value)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatInterface, \"VrJgoRWSJfH8TQKycz/O47aKvgc=\");\n_c = ChatInterface;\nexport default ChatInterface;\nvar _c;\n$RefreshReg$(_c, \"ChatInterface\");","map":{"version":3,"names":["React","useState","useEffect","useRef","ChatMessage","jsxDEV","_jsxDEV","ChatInterface","_s","messages","setMessages","inputText","setInputText","messagesEndRef","scrollToBottom","_messagesEndRef$curre","current","scrollIntoView","behavior","handleSendMessage","event","preventDefault","trim","userMessage","text","isBot","body","chatHistory","question","botMessage","response","fetch","method","headers","JSON","stringify","decoder","TextDecoderStream","reader","pipeThrough","getReader","accumulatedAnswer","value","done","read","currentHistory","updatedHistory","lastChatIndex","length","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","message","index","ref","onSubmit","type","placeholder","onChange","e","target","_c","$RefreshReg$"],"sources":["E:/github_repos/llm_pinecone/llm-full-stack-tutorial/client/src/components/ChatInterface.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport ChatMessage from './ChatMessage';\r\n\r\nfunction ChatInterface() {\r\n  const [messages, setMessages] = useState([]);\r\n  const [inputText, setInputText] = useState('');\r\n  const messagesEndRef = useRef(null);\r\n\r\n  const scrollToBottom = () => {\r\n    messagesEndRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  useEffect(scrollToBottom, [messages]);\r\n\r\n  const handleSendMessage = async (event) => {\r\n    event.preventDefault();\r\n    if (!inputText.trim()) return; // Prevent sending empty messages\r\n    \r\n    // Get a snapshot of the current messages + the user's message\r\n    // to send to the server to get an answer\r\n    const userMessage = { text: inputText, isBot: false };\r\n    const body = {\r\n      chatHistory: [...messages, userMessage],\r\n      question: inputText,\r\n    }    \r\n\r\n    // Add a new empty bot message to the UI\r\n    const botMessage = { text: '', isBot: true };\r\n    setMessages([...messages, userMessage, botMessage]);\r\n    setInputText('');\r\n\r\n    // Send the user's message to the server and wait for a response.\r\n    // This response will be streamed to this component.\r\n    const response = await fetch('http://localhost:5000/handle-query', {\r\n      method: 'POST',\r\n      headers: { 'Content-Type': 'application/json' },\r\n      body: JSON.stringify(body),\r\n    });\r\n\r\n    if (!response.body) return;\r\n\r\n    // Set up the infrastructure to stream the response data\r\n    let decoder = new TextDecoderStream();\r\n    const reader = response.body.pipeThrough(decoder).getReader()    \r\n    let accumulatedAnswer = \"\"\r\n\r\n    while (true) {\r\n      var { value, done } = await reader.read();\r\n      if (done) break;\r\n      accumulatedAnswer += value;\r\n      setMessages(currentHistory => {\r\n        const updatedHistory = [...currentHistory]\r\n        const lastChatIndex = updatedHistory.length - 1\r\n        updatedHistory[lastChatIndex] = {\r\n          ...updatedHistory[lastChatIndex],\r\n          text: accumulatedAnswer\r\n        }\r\n        return updatedHistory\r\n      })\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"chat-container\">\r\n      <header className=\"chat-header\">URL Question & Answer</header>\r\n      {\r\n        messages.length === 0 \r\n          && \r\n        <div className=\"chat-message bot-message\">\r\n          <p className=\"initial-message\">Hi there! I'm a bot trained to answer questions about the URL you entered. Try asking me a question below!</p>\r\n        </div>\r\n      }\r\n      <div className=\"chat-messages\">\r\n        {messages.map((message, index) => (\r\n          <ChatMessage key={index} message={message} />\r\n        ))}\r\n        <div ref={messagesEndRef} />\r\n      </div>\r\n      <form className=\"chat-input\" onSubmit={handleSendMessage}>\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Type a question and press enter ...\"\r\n          value={inputText}\r\n          onChange={(e) => setInputText(e.target.value)}\r\n        />\r\n\r\n      </form>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ChatInterface;"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExC,SAASC,aAAaA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,SAAS,EAAEC,YAAY,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAMY,cAAc,GAAGV,MAAM,CAAC,IAAI,CAAC;EAEnC,MAAMW,cAAc,GAAGA,CAAA,KAAM;IAAA,IAAAC,qBAAA;IAC3B,CAAAA,qBAAA,GAAAF,cAAc,CAACG,OAAO,cAAAD,qBAAA,uBAAtBA,qBAAA,CAAwBE,cAAc,CAAC;MAAEC,QAAQ,EAAE;IAAS,CAAC,CAAC;EAChE,CAAC;EAEDhB,SAAS,CAACY,cAAc,EAAE,CAACL,QAAQ,CAAC,CAAC;EAErC,MAAMU,iBAAiB,GAAG,MAAOC,KAAK,IAAK;IACzCA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,IAAI,CAACV,SAAS,CAACW,IAAI,CAAC,CAAC,EAAE,OAAO,CAAC;;IAE/B;IACA;IACA,MAAMC,WAAW,GAAG;MAAEC,IAAI,EAAEb,SAAS;MAAEc,KAAK,EAAE;IAAM,CAAC;IACrD,MAAMC,IAAI,GAAG;MACXC,WAAW,EAAE,CAAC,GAAGlB,QAAQ,EAAEc,WAAW,CAAC;MACvCK,QAAQ,EAAEjB;IACZ,CAAC;;IAED;IACA,MAAMkB,UAAU,GAAG;MAAEL,IAAI,EAAE,EAAE;MAAEC,KAAK,EAAE;IAAK,CAAC;IAC5Cf,WAAW,CAAC,CAAC,GAAGD,QAAQ,EAAEc,WAAW,EAAEM,UAAU,CAAC,CAAC;IACnDjB,YAAY,CAAC,EAAE,CAAC;;IAEhB;IACA;IACA,MAAMkB,QAAQ,GAAG,MAAMC,KAAK,CAAC,oCAAoC,EAAE;MACjEC,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CP,IAAI,EAAEQ,IAAI,CAACC,SAAS,CAACT,IAAI;IAC3B,CAAC,CAAC;IAEF,IAAI,CAACI,QAAQ,CAACJ,IAAI,EAAE;;IAEpB;IACA,IAAIU,OAAO,GAAG,IAAIC,iBAAiB,CAAC,CAAC;IACrC,MAAMC,MAAM,GAAGR,QAAQ,CAACJ,IAAI,CAACa,WAAW,CAACH,OAAO,CAAC,CAACI,SAAS,CAAC,CAAC;IAC7D,IAAIC,iBAAiB,GAAG,EAAE;IAE1B,OAAO,IAAI,EAAE;MACX,IAAI;QAAEC,KAAK;QAAEC;MAAK,CAAC,GAAG,MAAML,MAAM,CAACM,IAAI,CAAC,CAAC;MACzC,IAAID,IAAI,EAAE;MACVF,iBAAiB,IAAIC,KAAK;MAC1BhC,WAAW,CAACmC,cAAc,IAAI;QAC5B,MAAMC,cAAc,GAAG,CAAC,GAAGD,cAAc,CAAC;QAC1C,MAAME,aAAa,GAAGD,cAAc,CAACE,MAAM,GAAG,CAAC;QAC/CF,cAAc,CAACC,aAAa,CAAC,GAAG;UAC9B,GAAGD,cAAc,CAACC,aAAa,CAAC;UAChCvB,IAAI,EAAEiB;QACR,CAAC;QACD,OAAOK,cAAc;MACvB,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACExC,OAAA;IAAK2C,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7B5C,OAAA;MAAQ2C,SAAS,EAAC,aAAa;MAAAC,QAAA,EAAC;IAAqB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAE5D7C,QAAQ,CAACuC,MAAM,KAAK,CAAC,iBAErB1C,OAAA;MAAK2C,SAAS,EAAC,0BAA0B;MAAAC,QAAA,eACvC5C,OAAA;QAAG2C,SAAS,EAAC,iBAAiB;QAAAC,QAAA,EAAC;MAA0G;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAG;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1I,CAAC,eAERhD,OAAA;MAAK2C,SAAS,EAAC,eAAe;MAAAC,QAAA,GAC3BzC,QAAQ,CAAC8C,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,kBAC3BnD,OAAA,CAACF,WAAW;QAAaoD,OAAO,EAAEA;MAAQ,GAAxBC,KAAK;QAAAN,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAqB,CAC7C,CAAC,eACFhD,OAAA;QAAKoD,GAAG,EAAE7C;MAAe;QAAAsC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC,eACNhD,OAAA;MAAM2C,SAAS,EAAC,YAAY;MAACU,QAAQ,EAAExC,iBAAkB;MAAA+B,QAAA,eACvD5C,OAAA;QACEsD,IAAI,EAAC,MAAM;QACXC,WAAW,EAAC,qCAAqC;QACjDnB,KAAK,EAAE/B,SAAU;QACjBmD,QAAQ,EAAGC,CAAC,IAAKnD,YAAY,CAACmD,CAAC,CAACC,MAAM,CAACtB,KAAK;MAAE;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC/C;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACJ,CAAC;AAEV;AAAC9C,EAAA,CAtFQD,aAAa;AAAA0D,EAAA,GAAb1D,aAAa;AAwFtB,eAAeA,aAAa;AAAC,IAAA0D,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}